"use client";

import { useEffect, useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import Cookies from "js-cookie";
import { getSocket } from "@/utils/socket";
import { LobbyData } from "@/types/lobby";
import {
  Plane,
  Users,
  Clock,
  Shield,
  Target,
  MessageSquare,
  Send,
  LogOut,
  RefreshCw,
  User,
  Star,
  Trophy,
  Radar,
} from "lucide-react";
import { useCountdown } from "./hooks/useCountdown";

type QuizData = {
  id: string;
  name: string;
  duration: number;
};

type ChatMessage = {
  userId: string;
  username: string;
  message: string;
  timestamp: string;
  type?: "chat" | "system";
  color?: "red" | "green";
};

export default function StudentPage() {
  const [lobbies, setLobbies] = useState<LobbyData[]>([]);
  const [joinedLobby, setJoinedLobby] = useState<string | null>(null);
  const [isJoining, setIsJoining] = useState<string | null>(null);
  const [currentQuiz, setCurrentQuiz] = useState<QuizData | null>(null);
  const [notification, setNotification] = useState<string>("");
  const [isLoading, setIsLoading] = useState(true);
  const [socket, setSocket] = useState<any | null>(null);
  const [isLeaving, setIsLeaving] = useState<boolean>(false);
  const [userId, setUserId] = useState<string>("");

  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [chatInput, setChatInput] = useState("");

  const countdown = useCountdown(currentQuiz?.duration ?? 0);

  useEffect(() => {
    const id =
      Cookies.get("user.id") ?? "student-" + Math.floor(Math.random() * 1000);
    setUserId(id);
    const username = Cookies.get("user.username") || "Anonymous";

    const s = getSocket();
    setSocket(s);

    const savedLobby = localStorage.getItem("joinedLobby");
    if (savedLobby) {
      s.emit("join-lobby", { lobbyId: savedLobby, userId: id, username });
    }

    s.emit("get-lobbies");

    // ===== Handlers =====
    const lobbyUpdatedHandler = (updatedLobbies: LobbyData[]) => {
      // setLobbies(updatedLobbies.filter((l) => l.status === "WAITING"));
      setLobbies(updatedLobbies);
      setIsLoading(false);
    };

    const lobbyCreatedHandler = (newLobby: LobbyData) => {
      setLobbies((prev) => [...prev, newLobby]);
      showNotification(`New mission "${newLobby.name}" is available!`);
    };

    const joinSuccessHandler = ({ lobbyId, lobbyName }: any) => {
      setJoinedLobby(lobbyId);
      setIsJoining(null);
      localStorage.setItem("joinedLobby", lobbyId);
      s.emit("get-chats", lobbyId);
      showNotification(`Successfully joined mission "${lobbyName}"!`);
    };

    const joinErrorHandler = ({ message }: any) => {
      console.error("Join error:", message);
      setIsJoining(null);
      showNotification(message);
    };

    const leaveSuccessHandler = ({ lobbyId }: any) => {
      setJoinedLobby(null);
      setCurrentQuiz(null);
      setMessages([]);
      localStorage.removeItem("joinedLobby");
      setIsLeaving(false);
      showNotification("Left the mission successfully");
    };

    const lobbyDeletedHandler = ({ lobbyId }: any) => {
      setLobbies((prev) => prev.filter((lobby) => lobby.id !== lobbyId));
      if (localStorage.getItem("joinedLobby") === lobbyId) {
        setJoinedLobby(null);
        setCurrentQuiz(null);
        setMessages([]);
        showNotification("The mission has been cancelled by command");
        localStorage.removeItem("joinedLobby");
      }
    };

    const chatHistoryHandler = (msgs: ChatMessage[]) => setMessages(msgs);
    const chatMessageHandler = (msg: ChatMessage) =>
      setMessages((prev) => [...prev, msg]);

    const studentJoinedHandler = ({ username }: any) => {
      const sysMsg: ChatMessage = {
        userId: "system",
        username: "Command",
        message: `${username} has joined the mission.`,
        timestamp: new Date().toISOString(),
        type: "system",
        color: "green",
      };
      setMessages((prev) => [...prev, sysMsg]);
    };

    const studentLeftHandler = ({ userId: leavingUserId, username }: any) => {
      if (leavingUserId === userId) return;
      const sysMsg: ChatMessage = {
        userId: "system",
        username: "Command",
        message: `${username} has left the mission.`,
        timestamp: new Date().toISOString(),
        type: "system",
        color: "red",
      };
      setMessages((prev) => [...prev, sysMsg]);
    };

    const quizStartedHandler = (updatedLobby: any) => {
      const currentLobbyId = localStorage.getItem("joinedLobby");

      if (currentLobbyId === updatedLobby.id) {
        setCurrentQuiz({
          id: updatedLobby.id,
          name: updatedLobby.name,
          duration: updatedLobby.duration || 0,
        });

        showNotification(`Mission "${updatedLobby.name}" has started!`);
      }
    };

    const quizEndedHandler = ({ lobbyId }: any) => {
      if (localStorage.getItem("joinedLobby") === lobbyId) {
        setCurrentQuiz(null);
        setJoinedLobby(null);
        setMessages([]);
        showNotification("Mission completed. Thank you for your service!");
        localStorage.removeItem("joinedLobby");
      }

      if (s) {
        s.emit("get-lobbies");
      }
    };

    s.on("lobby-updated", lobbyUpdatedHandler);
    s.on("lobby-created", lobbyCreatedHandler);
    s.on("join-success", joinSuccessHandler);
    s.on("join-error", joinErrorHandler);
    s.on("leave-success", leaveSuccessHandler);
    s.on("lobby-deleted", lobbyDeletedHandler);
    s.on("chat-history", chatHistoryHandler);
    s.on("chat-message", chatMessageHandler);
    s.on("student-joined", studentJoinedHandler);
    s.on("student-left", studentLeftHandler);
    s.on("quiz-started", quizStartedHandler);
    s.on("quiz-ended", quizEndedHandler);

    return () => {
      s.off("lobby-updated", lobbyUpdatedHandler);
      s.off("lobby-created", lobbyCreatedHandler);
      s.off("join-success", joinSuccessHandler);
      s.off("join-error", joinErrorHandler);
      s.off("leave-success", leaveSuccessHandler);
      s.off("lobby-deleted", lobbyDeletedHandler);
      s.off("chat-history", chatHistoryHandler);
      s.off("chat-message", chatMessageHandler);
      s.off("student-joined", studentJoinedHandler);
      s.off("student-left", studentLeftHandler);
      s.off("quiz-started", quizStartedHandler);
      s.off("quiz-ended", quizEndedHandler);
    };
  }, []);

  // ===== Helpers =====
  const showNotification = (msg: string) => setNotification(msg);
  const dismissNotification = () => setNotification("");

  const joinLobby = (lobbyId: string, status: string) => {
    if (!socket || isJoining || joinedLobby) return;

    // ⛔ Don’t allow joining a finished mission
    if (status === "FINISHED") {
      alert("This mission has already ended. You cannot join.");
      return;
    }

    if (status === "ONGOING") {
      alert("This mission has already started. You cannot join.");
      return;
    }

    setIsJoining(lobbyId);

    socket.emit("join-lobby", {
      lobbyId,
      userId,
      username: Cookies.get("user.username") || "Anonymous",
    });
  };

  const leaveLobby = () => {
    if (!socket || !joinedLobby) return;
    if (window.confirm("Are you sure you want to abort this mission?")) {
      socket.emit("leave-lobby", {
        lobbyId: joinedLobby,
        userId,
        username: Cookies.get("user.username") || "Anonymous",
      });
      setIsLeaving(true);
    }
  };

  const refreshLobbies = () => {
    if (!socket) return;
    setIsLoading(true);
    socket.emit("get-lobbies");
    showNotification("Scanning for new missions...");

    setTimeout(() => {
      setIsLoading(false);
      dismissNotification();
    }, 3000);
  };

  const sendMessage = () => {
    if (!chatInput.trim() || !joinedLobby || !socket) return;
    socket.emit("chat-message", {
      lobbyId: joinedLobby,
      userId,
      username: Cookies.get("user.username") || "Anonymous",
      message: chatInput,
    });
    setChatInput("");
  };

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        duration: 0.6,
        staggerChildren: 0.1,
      },
    },
  };

  const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    visible: {
      y: 0,
      opacity: 1,
      transition: { duration: 0.5 },
    },
  };

  const cardVariants = {
    hidden: { scale: 0.9, opacity: 0 },
    visible: {
      scale: 1,
      opacity: 1,
      transition: { duration: 0.4, ease: "easeOut" },
    },
    hover: {
      scale: 1.02,
      transition: { duration: 0.2 },
    },
  };

  const messageVariants = {
    hidden: { x: -20, opacity: 0 },
    visible: { x: 0, opacity: 1, transition: { duration: 0.3 } },
  };

  // Quiz Active UI
  if (currentQuiz) {
    return (
      <motion.div
        className="min-h-screen bg-gradient-to-br from-white via-blue-50 to-blue-100"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.6 }}
      >
        <div className="flex items-center justify-center min-h-screen">
          <motion.div
            className="bg-white shadow-2xl border border-blue-200 rounded-3xl p-12 text-center max-w-2xl mx-6"
            initial={{ scale: 0.8, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            transition={{ duration: 0.5, ease: "easeOut" }}
          >
            <motion.div
              className="mb-8"
              initial={{ y: -20, opacity: 0 }}
              animate={{ y: 0, opacity: 1 }}
              transition={{ delay: 0.2, duration: 0.5 }}
            >
              <motion.div
                className="p-6 bg-main rounded-full w-24 h-24 mx-auto mb-6 shadow-lg"
                whileHover={{ scale: 1.1 }}
                animate={{ rotate: [0, 5, -5, 0] }}
                transition={{
                  rotate: { repeat: Infinity, duration: 3 },
                  scale: { duration: 0.2 },
                }}
              >
                <Trophy className="w-12 h-12 text-white mx-auto" />
              </motion.div>
              <h1 className="text-4xl font-bold text-gray-800 mb-4">
                {currentQuiz.name}
              </h1>
              <div className="flex items-center justify-center gap-2 text-blue-600 mb-6">
                <Target className="w-5 h-5" />
                <span className="text-xl font-semibold">Mission Active</span>
              </div>
            </motion.div>

            <motion.div
              className="bg-blue-50 border border-blue-200 rounded-2xl p-6 mb-6"
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              transition={{ delay: 0.3, duration: 0.4 }}
            >
              <div className="flex items-center justify-center gap-3 text-gray-800">
                <Clock className="w-6 h-6 text-blue-600" />
                <span className="text-2xl font-bold">{countdown}</span>
              </div>
              <p className="text-blue-600 mt-2 font-medium">Mission Duration</p>
            </motion.div>

            <motion.div
              className="flex items-center justify-center gap-2 text-blue-600"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 0.4, duration: 0.5 }}
            >
              <motion.div
                className="w-3 h-3 bg-blue-500 rounded-full"
                animate={{ scale: [1, 1.2, 1] }}
                transition={{ repeat: Infinity, duration: 1.5 }}
              />
              <span className="font-medium">Training in progress...</span>
            </motion.div>
          </motion.div>
        </div>
      </motion.div>
    );
  }

  // Loading UI
  if (isLoading) {
    return (
      <motion.div
        className="min-h-screen bg-gradient-to-br from-white via-blue-50 to-blue-100 flex items-center justify-center"
        transition={{ duration: 0.4 }}
      >
        <div className="text-center">
          <motion.div
            className="relative mb-8"
            animate={{ rotate: 360 }}
            transition={{ repeat: Infinity, duration: 3, ease: "linear" }}
          >
            <Radar className="w-24 h-24 text-blue-400 mx-auto opacity-60" />
            <motion.div
              className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2"
              animate={{ scale: [1, 1.1, 1] }}
              transition={{ repeat: Infinity, duration: 2 }}
            >
              <Plane className="w-12 h-12 text-blue-600" />
            </motion.div>
          </motion.div>
          <motion.h3
            className="text-2xl font-bold text-gray-800 mb-2"
            transition={{ delay: 0.2, duration: 0.5 }}
          >
            Scanning for Missions...
          </motion.h3>
          <motion.p
            className="text-blue-600"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.3, duration: 0.5 }}
          >
            Establishing connection with command center
          </motion.p>
        </div>
      </motion.div>
    );
  }

  return (
    <motion.div
      className="min-h-screen bg-gradient-to-br from-white via-blue-50 to-blue-100"
      variants={containerVariants}
    >
      {/* Header */}
      <motion.div
        className="relative overflow-hidden bg-white shadow-lg"
        variants={itemVariants}
      >
        <div className="absolute inset-0 bg-gradient-to-r from-blue-500/10 to-transparent"></div>
        <div className="relative px-6 py-8">
          <div className="max-w-7xl mx-auto">
            <motion.div
              className="flex items-center gap-4 mb-2"
              whileHover={{ x: 5 }}
              transition={{ duration: 0.2 }}
            >
              <motion.div
                className="p-3 bg-main rounded-full shadow-lg"
                whileHover={{ scale: 1.1 }}
                whileTap={{ scale: 0.95 }}
              >
                <Shield className="w-8 h-8 text-white" />
              </motion.div>
              <div>
                <h1 className="text-4xl font-bold text-gray-800">AFTS T50</h1>
                <p className="text-blue-600 font-medium">Lobby Quiz</p>
              </div>
            </motion.div>
          </div>
        </div>
      </motion.div>

      <div className="px-6 py-8">
        <div className="max-w-7xl mx-auto">
          {/* Notifications */}
          <AnimatePresence>
            {notification && (
              <motion.div
                className="mb-6 bg-blue-50 border border-blue-200 rounded-xl p-4 shadow-md"
                initial={{ opacity: 0, y: -20, scale: 0.95 }}
                animate={{ opacity: 1, y: 0, scale: 1 }}
                exit={{ opacity: 0, y: -20, scale: 0.95 }}
                transition={{ duration: 0.3 }}
              >
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <motion.div
                      className="p-2 bg-main rounded-lg"
                      animate={{ scale: [1, 1.1, 1] }}
                      transition={{ repeat: Infinity, duration: 2 }}
                    >
                      <MessageSquare className="w-4 h-4 text-white" />
                    </motion.div>
                    <p className="text-gray-800 font-medium">{notification}</p>
                  </div>
                  <motion.button
                    onClick={dismissNotification}
                    className="text-blue-600 hover:text-blue-800 text-sm underline font-medium"
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    Dismiss
                  </motion.button>
                </div>
              </motion.div>
            )}
          </AnimatePresence>

          <AnimatePresence>
            {isLeaving && (
              <motion.div
                className="mb-6 bg-yellow-50 border border-yellow-200 rounded-xl p-4 text-center shadow-md"
                initial={{ opacity: 0, scale: 0.9 }}
                animate={{ opacity: 1, scale: 1 }}
                exit={{ opacity: 0, scale: 0.9 }}
                transition={{ duration: 0.3 }}
              >
                <div className="flex items-center justify-center gap-2 text-yellow-700">
                  <motion.div
                    className="w-5 h-5 border-2 border-yellow-400 border-t-yellow-600 rounded-full"
                    animate={{ rotate: 360 }}
                    transition={{
                      repeat: Infinity,
                      duration: 1,
                      ease: "linear",
                    }}
                  />
                  <span className="font-medium">Aborting mission...</span>
                </div>
              </motion.div>
            )}
          </AnimatePresence>

          <motion.div
            className={`grid gap-8 pt-10 ${
              joinedLobby ? "lg:grid-cols-3" : "lg:grid-cols-1"
            }`}
            variants={containerVariants}
          >
            {/* Missions Section */}
            <div
              className={`${
                joinedLobby ? "lg:col-span-2" : "lg:col-span-3"
              } px-10`}
            >
              {lobbies.length === 0 ? (
                <motion.div
                  className="text-center py-16"
                  variants={itemVariants}
                >
                  <div className="mb-8">
                    <motion.div
                      animate={{ rotate: 360 }}
                      transition={{
                        repeat: Infinity,
                        duration: 4,
                        ease: "linear",
                      }}
                    >
                      <Radar className="w-24 h-24 text-blue-300 mx-auto mb-6 opacity-50" />
                    </motion.div>
                    <motion.h3
                      className="text-2xl font-bold text-gray-800 mb-2"
                      variants={itemVariants}
                    >
                      No Active Missions
                    </motion.h3>
                    <motion.p
                      className="text-blue-600 mb-6"
                      variants={itemVariants}
                    >
                      Waiting for command to deploy training missions
                    </motion.p>
                    <motion.button
                      onClick={refreshLobbies}
                      className="bg-main hover:bg-blue-700 text-white px-6 py-3 rounded-xl font-semibold shadow-lg flex items-center gap-2 mx-auto"
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                      variants={itemVariants}
                    >
                      <RefreshCw className="w-5 h-5" />
                      Scan Again
                    </motion.button>
                  </div>
                </motion.div>
              ) : (
                <motion.div className="space-y-6" variants={containerVariants}>
                  {/* Available Missions */}
                  <motion.div
                    className="flex items-center justify-between"
                    variants={itemVariants}
                  >
                    <h2 className="text-2xl font-bold text-gray-800 flex items-center gap-3">
                      <Target className="w-6 h-6 text-blue-600" />
                      Available Missions
                    </h2>
                    <motion.button
                      onClick={refreshLobbies}
                      className="bg-white hover:bg-gray-50 border-2 border-blue-200 text-blue-600 px-4 py-2 rounded-lg font-medium shadow-sm flex items-center gap-2"
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      <RefreshCw className="w-4 h-4" />
                      Refresh
                    </motion.button>
                  </motion.div>

                  <motion.div
                    className="grid gap-6"
                    variants={containerVariants}
                  >
                    {lobbies
                      .filter((lobby) => lobby.status !== "FINISHED")
                      .map((lobby, index) => (
                        <motion.div
                          key={lobby.id}
                          className="bg-white border-2 border-blue-100 rounded-2xl p-6 shadow-xl hover:shadow-2xl"
                          variants={cardVariants}
                          whileHover="hover"
                          layout
                          custom={index}
                        >
                          {/* Mission Header */}
                          <motion.div
                            className="flex items-start justify-between mb-6"
                            initial={{ opacity: 0 }}
                            animate={{ opacity: 1 }}
                            transition={{ delay: index * 0.1 }}
                          >
                            <div className="flex items-center gap-4">
                              <motion.div
                                className="p-3 bg-blue-50 rounded-full border-2 border-blue-200"
                                whileHover={{ scale: 1.1 }}
                              >
                                <Plane className="w-6 h-6 text-blue-600" />
                              </motion.div>
                              <div>
                                <h3 className="text-xl font-bold text-gray-800">
                                  {lobby.name}
                                </h3>
                                <p className="text-blue-600 text-sm font-medium">
                                  Commander:{" "}
                                  {lobby.instructor?.username || "Unknown"}
                                </p>
                                <p className="text-gray-500 text-xs">
                                  Mission ID: {lobby.id.slice(-8).toUpperCase()}
                                </p>
                              </div>
                            </div>

                            <motion.div
                              className={`px-3 py-1 rounded-full text-xs font-semibold ${
                                lobby.status === "ONGOING"
                                  ? "bg-yellow-100 text-yellow-700 border border-yellow-300"
                                  : "bg-green-100 text-green-700 border border-green-300"
                              }`}
                              animate={{ scale: [1, 1.05, 1] }}
                              transition={{ repeat: Infinity, duration: 2 }}
                            >
                              {lobby.status}
                            </motion.div>
                          </motion.div>

                          {/* Mission Stats */}
                          <motion.div
                            className="grid grid-cols-2 gap-4 mb-6"
                            initial={{ y: 20, opacity: 0 }}
                            animate={{ y: 0, opacity: 1 }}
                            transition={{ delay: index * 0.1 + 0.2 }}
                          >
                            <motion.div
                              className="bg-blue-50 border border-blue-100 rounded-xl p-4"
                              whileHover={{ scale: 1.02 }}
                            >
                              <div className="flex items-center gap-2 text-blue-600 mb-2">
                                <Users className="w-4 h-4" />
                                <span className="text-sm font-medium">
                                  Cadets
                                </span>
                              </div>
                              <span className="text-2xl font-bold text-gray-800">
                                {lobby._count?.LobbyUser || 0}
                              </span>
                            </motion.div>

                            <motion.div
                              className="bg-blue-50 border border-blue-100 rounded-xl p-4"
                              whileHover={{ scale: 1.02 }}
                            >
                              <div className="flex items-center gap-2 text-blue-600 mb-2">
                                <Clock className="w-4 h-4" />
                                <span className="text-sm font-medium">
                                  Duration
                                </span>
                              </div>
                              <span className="text-2xl font-bold text-gray-800">
                                {lobby.duration}m
                              </span>
                            </motion.div>
                          </motion.div>

                          {/* Mission Brief */}
                          <motion.div
                            className="bg-gray-50 border border-gray-200 rounded-xl p-4 mb-6"
                            initial={{ y: 20, opacity: 0 }}
                            animate={{ y: 0, opacity: 1 }}
                            transition={{ delay: index * 0.1 + 0.3 }}
                          >
                            <h4 className="text-gray-800 font-semibold mb-2 flex items-center gap-2">
                              <Star className="w-4 h-4 text-yellow-500" />
                              Mission Briefing
                            </h4>
                            <p className="text-gray-600 text-sm">
                              Training exercise designed to test tactical
                              knowledge and decision-making skills under
                              pressure.
                            </p>
                          </motion.div>

                          {/* Action Button */}
                          <motion.button
                            className={`w-full py-4 px-6 rounded-xl font-semibold flex items-center justify-center gap-3 border-2 ${
                              joinedLobby === lobby.id
                                ? "bg-green-50 text-green-700 border-green-200 cursor-default"
                                : isJoining === lobby.id
                                ? "bg-gray-100 text-gray-500 border-gray-300 cursor-not-allowed"
                                : joinedLobby
                                ? "bg-gray-100 text-gray-500 border-gray-300 cursor-not-allowed"
                                : "bg-main hover:bg-blue-700 text-white border-blue-600 shadow-lg"
                            }`}
                            onClick={() => joinLobby(lobby.id, lobby.status)}
                            disabled={!!joinedLobby || isJoining === lobby.id}
                            whileHover={
                              !joinedLobby && isJoining !== lobby.id
                                ? { scale: 1.02 }
                                : {}
                            }
                            whileTap={
                              !joinedLobby && isJoining !== lobby.id
                                ? { scale: 0.98 }
                                : {}
                            }
                            initial={{ y: 20, opacity: 0 }}
                            animate={{ y: 0, opacity: 1 }}
                            transition={{ delay: index * 0.1 + 0.4 }}
                          >
                            {joinedLobby === lobby.id ? (
                              <>
                                <motion.div
                                  className="w-2 h-2 bg-green-500 rounded-full"
                                  animate={{ scale: [1, 1.2, 1] }}
                                  transition={{
                                    repeat: Infinity,
                                    duration: 1.5,
                                  }}
                                />
                                Enlisted - Awaiting Orders
                              </>
                            ) : isJoining === lobby.id ? (
                              <>
                                <motion.div
                                  className="w-5 h-5 border-2 border-gray-400 border-t-gray-600 rounded-full"
                                  animate={{ rotate: 360 }}
                                  transition={{
                                    repeat: Infinity,
                                    duration: 1,
                                    ease: "linear",
                                  }}
                                />
                                Enlisting...
                              </>
                            ) : joinedLobby ? (
                              <>
                                <Shield className="w-5 h-5" />
                                Already on Mission
                              </>
                            ) : (
                              <>
                                <Target className="w-5 h-5" />
                                Enlist for Mission
                              </>
                            )}
                          </motion.button>
                        </motion.div>
                      ))}
                  </motion.div>

                  {/* Finished Missions */}
                  <motion.div
                    className="flex items-center justify-between"
                    variants={itemVariants}
                  >
                    <h2 className="text-2xl font-bold text-gray-800 flex items-center gap-3">
                      <Target className="w-6 h-6 text-blue-600" />
                      Finished Missions
                    </h2>
                    <motion.button
                      onClick={refreshLobbies}
                      className="bg-white hover:bg-gray-50 border-2 border-blue-200 text-blue-600 px-4 py-2 rounded-lg font-medium shadow-sm flex items-center gap-2"
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      <RefreshCw className="w-4 h-4" />
                      Refresh
                    </motion.button>
                  </motion.div>

                  <motion.div
                    className="grid gap-6"
                    variants={containerVariants}
                  >
                    {lobbies
                      .filter((lobby) => lobby.status === "FINISHED")
                      .map((lobby, index) => (
                        <motion.div
                          key={lobby.id}
                          className="bg-white border-2 border-blue-100 rounded-2xl p-6 shadow-xl hover:shadow-2xl"
                          variants={cardVariants}
                          whileHover="hover"
                          layout
                          custom={index}
                        >
                          {/* Finished Mission Header */}
                          <motion.div
                            className="flex items-start justify-between mb-6"
                            initial={{ opacity: 0 }}
                            animate={{ opacity: 1 }}
                            transition={{ delay: index * 0.1 }}
                          >
                            <div className="flex items-center gap-4">
                              <motion.div
                                className="p-3 bg-blue-50 rounded-full border-2 border-blue-200"
                                whileHover={{ scale: 1.1 }}
                              >
                                <Plane className="w-6 h-6 text-blue-600" />
                              </motion.div>
                              <div>
                                <h3 className="text-xl font-bold text-gray-800">
                                  {lobby.name}
                                </h3>
                                <p className="text-blue-600 text-sm font-medium">
                                  Commander:{" "}
                                  {lobby.instructor?.username || "Unknown"}
                                </p>
                                <p className="text-gray-500 text-xs">
                                  Mission ID: {lobby.id.slice(-8).toUpperCase()}
                                </p>
                              </div>
                            </div>

                            <motion.div className="px-3 py-1 bg-green-100 text-green-700 border border-green-300 rounded-full text-xs font-semibold">
                              FINISHED
                            </motion.div>
                          </motion.div>

                          {/* Stats same as above */}
                          {/* ... keep your stats + brief ... */}

                          {/* Finished button */}
                          <motion.button
                            className="w-full py-4 px-6 rounded-xl font-semibold flex items-center justify-center gap-3 border-2 bg-gray-100 text-gray-500 border-gray-300 cursor-not-allowed"
                            disabled
                          >
                            <Shield className="w-5 h-5" />
                            Mission Completed
                          </motion.button>
                        </motion.div>
                      ))}
                  </motion.div>
                </motion.div>
              )}
            </div>

            {/* Communication Panel */}
            <AnimatePresence>
              {joinedLobby && (
                <motion.div
                  className="lg:col-span-1"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: 20 }}
                  transition={{ duration: 0.5 }}
                >
                  <motion.div
                    className="bg-white border-2 border-blue-100 rounded-2xl shadow-xl overflow-hidden"
                    layoutId="communication-panel"
                  >
                    {/* Chat Header */}
                    <motion.div
                      className="bg-gradient-to-r from-blue-600 to-blue-700 border-b border-blue-200 p-6"
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      transition={{ delay: 0.2 }}
                    >
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-3">
                          <motion.div
                            className="p-2 bg-white/20 rounded-lg"
                            whileHover={{ scale: 1.1 }}
                          >
                            <MessageSquare className="w-5 h-5 text-white" />
                          </motion.div>
                          <div>
                            <h3 className="text-lg font-bold text-white">
                              Mission Comms
                            </h3>
                            <p className="text-blue-100 text-sm">
                              Secure Channel
                            </p>
                          </div>
                        </div>
                        <motion.button
                          onClick={leaveLobby}
                          className="bg-red-100 hover:bg-red-200 border border-red-300 text-red-700 hover:text-red-800 px-3 py-2 rounded-lg text-sm font-medium flex items-center gap-2"
                          whileHover={{ scale: 1.05 }}
                          whileTap={{ scale: 0.95 }}
                        >
                          <LogOut className="w-4 h-4" />
                          Abort
                        </motion.button>
                      </div>
                    </motion.div>

                    {/* Messages */}
                    <motion.div
                      className="h-80 overflow-y-auto p-4 space-y-3 bg-gray-50"
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      transition={{ delay: 0.3 }}
                    >
                      <AnimatePresence>
                        {messages.map((msg, idx) => (
                          <motion.div
                            key={idx}
                            className={`${
                              msg.type === "system"
                                ? "text-center"
                                : msg.userId === userId
                                ? "ml-4"
                                : "mr-4"
                            }`}
                            variants={messageVariants}
                            initial="hidden"
                            animate="visible"
                            exit="hidden"
                            layout
                          >
                            {msg.type === "system" ? (
                              <motion.div
                                className="bg-white border border-gray-200 rounded-lg px-3 py-2 text-center"
                                whileHover={{ scale: 1.02 }}
                              >
                                <span
                                  className={`text-xs font-medium ${
                                    msg.color === "red"
                                      ? "text-red-600"
                                      : "text-green-600"
                                  }`}
                                >
                                  {msg.message}
                                </span>
                                <div className="text-xs text-gray-500 mt-1">
                                  {new Date(msg.timestamp).toLocaleTimeString()}
                                </div>
                              </motion.div>
                            ) : (
                              <motion.div
                                className={`max-w-xs ${
                                  msg.userId === userId
                                    ? "ml-auto bg-main text-white border border-blue-600"
                                    : "bg-white border border-gray-200 text-gray-800"
                                } rounded-xl p-3 shadow-sm`}
                                whileHover={{ scale: 1.02 }}
                              >
                                <div className="flex items-center gap-2 mb-1">
                                  <User className="w-3 h-3" />
                                  <span className="text-xs font-semibold opacity-80">
                                    {msg.username}
                                  </span>
                                </div>
                                <p className="text-sm">{msg.message}</p>
                                <div className="text-xs opacity-60 mt-1">
                                  {new Date(msg.timestamp).toLocaleTimeString()}
                                </div>
                              </motion.div>
                            )}
                          </motion.div>
                        ))}
                      </AnimatePresence>
                    </motion.div>

                    {/* Message Input */}
                    <motion.div
                      className="border-t border-gray-200 p-4 bg-white"
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ delay: 0.4 }}
                    >
                      <div className="flex gap-2">
                        <motion.input
                          type="text"
                          value={chatInput}
                          onChange={(e) => setChatInput(e.target.value)}
                          onKeyDown={(e) => e.key === "Enter" && sendMessage()}
                          placeholder="Send message to team..."
                          className="flex-1 bg-gray-50 border-2 border-gray-200 rounded-lg px-4 py-2 text-gray-800 placeholder-gray-500 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                          whileFocus={{ scale: 1.01 }}
                          transition={{ duration: 0.2 }}
                        />
                        <motion.button
                          onClick={sendMessage}
                          className="bg-main hover:bg-blue-700 text-white px-4 py-2 rounded-lg shadow-md"
                          whileHover={{ scale: 1.05 }}
                          whileTap={{ scale: 0.95 }}
                        >
                          <Send className="w-4 h-4" />
                        </motion.button>
                      </div>
                    </motion.div>
                  </motion.div>
                </motion.div>
              )}
            </AnimatePresence>
          </motion.div>
        </div>
      </div>

      <style jsx global>{`
        :root {
          --bg-main: #2563eb; /* blue-600 */
        }
        .bg-main {
          background-color: var(--bg-main);
        }
        .border-main {
          border-color: var(--bg-main);
        }
        .text-main {
          color: var(--bg-main);
        }
      `}</style>
    </motion.div>
  );
}
