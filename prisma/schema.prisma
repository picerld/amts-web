generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  user        User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id        String   @id @default(uuid())
  username  String
  password  String
  token     String?  @unique
  roleId    Int
  role      Role     @relation(fields: [roleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  Bank      Bank[]
}

model UserGrade {
  id        String   @id @default(uuid())
  userId    String
  grade     Int
  bankId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  bank      Bank     @relation(fields: [bankId], references: [id], onDelete: Cascade)
}

model Bank {
  id        Int         @id @default(autoincrement())
  title     String
  userId    String
  type      String // it should be "pg" or "ex"
  category  String // it should be "normal" or "emergency"
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now())
  questions Question[]
  userGrade UserGrade[]
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Question {
  id        Int      @id @default(autoincrement())
  question  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  bankId    Int
  answers   Answer[]
  Bank      Bank     @relation(fields: [bankId], references: [id], onDelete: Cascade)
}

model Answer {
  id         Int      @id @default(autoincrement())
  option     String
  text       String
  isTrue     Boolean
  questionId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  Question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}
