generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LobbyStatus {
  WAITING
  ONGOING
  FINISHED
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  user        User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id         String       @id @default(uuid())
  username   String
  password   String
  token      String?      @unique
  roleId     Int
  role       Role         @relation(fields: [roleId], references: [id])
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now())
  Bank       Bank[]
  UserGrade  UserGrade[]
  ExamLobby  ExamLobby[]
  LobbyUser  LobbyUser[]
  UserAnswer UserAnswer[]
}

model ExamLobby {
  id           String      @id @default(uuid())
  name         String
  instructorId String
  instructor   User        @relation(fields: [instructorId], references: [id])
  bankId       Int?
  bank         Bank?       @relation(fields: [bankId], references: [id])
  status       LobbyStatus @default(WAITING)
  startTime    DateTime?
  duration     Int // in minutes
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now())
  LobbyUser    LobbyUser[]
}

model LobbyUser {
  id        String    @id @default(uuid())
  userId    String
  lobbyId   String
  joinedAt  DateTime  @default(now())
  finished  Boolean   @default(false)
  user      User      @relation(fields: [userId], references: [id])
  lobby     ExamLobby @relation(fields: [lobbyId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())

  @@unique([userId, lobbyId], name: "unique_user_lobby")
}

model UserAnswer {
  id         String   @id @default(uuid())
  userId     String
  questionId Int
  answerId   Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  User     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  Answer   Answer?  @relation(fields: [answerId], references: [id])
}

model UserGrade {
  id        String   @id @default(uuid())
  userId    String
  grade     Int
  bankId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  bank      Bank     @relation(fields: [bankId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
}

model Bank {
  id        Int         @id @default(autoincrement())
  title     String
  userId    String
  type      String // it should be "pg" or "ex"
  category  String // it should be "normal" or "emergency"
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now())
  questions Question[]
  userGrade UserGrade[]
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  ExamLobby ExamLobby[]
}

model Question {
  id         Int          @id @default(autoincrement())
  question   String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now())
  bankId     Int
  answers    Answer[]
  Bank       Bank         @relation(fields: [bankId], references: [id], onDelete: Cascade)
  UserAnswer UserAnswer[]
}

model Answer {
  id         Int          @id @default(autoincrement())
  option     String
  text       String
  isTrue     Boolean
  questionId Int
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now())
  Question   Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  UserAnswer UserAnswer[]
}
